---
layout: post
title: 바운디드 컨텍스트?!
description: 소프트웨어 설계전략 스터디
date:   2018-10-18 01:55:00 +0530
categories: code
tags: [ software development ]
author: easywaldo
---

도메인주소설계핵심 `반 버논`저 을 읽으면서  **바운디드 컨텍스트** 
를 이용한 설계기법에 대한 정리를 해보고자 한다.

먼저 책 에서는 아래와 같이 소개하고 있다. 

>바운디드 컨텍스트를 사용하는 것은
>핵심이 무엇인가? 라는 질문에 답한다는 것으로 유도가 된다
>바운디드 컨텍스트는 전략적 계획의 핵심이 되는 모든 개념들을 밀접하게 유지하면서 포용해야 하고 나머지는 제외시켜야 한다.

### 그렇다면 도메인의 핵심을 어떻게 찾을 수 있을까?

소프트웨어 개발팀 과 해당 도메인의 전문가 가 생각하는 핵심은 다른 것일 가능성이 높을 것이다.
개발팀은 제품의 구현과정에서 복잡도가 높은 요소들을
핵심으로 인식할 가능성이 높을 것이며 
도메인 전문가는 비즈니스 측면에서 중요도가 높은 것을 핵심요소로 인식할 것이다.

### 복잡도 VS 비즈니스 중요도

결국 지속적으로 각각의 용어와 개념들을 검토하고 이들간의 관계를 따져보며
이들이 해당 컨텍스트 안에 들어갈만한 것인지 그리고 일관성을 가지고 있는지를 확인해야 할 것 이다.

내가 생각해본 예시는 아래와 같다.

학사행정시스템을 만든다고 하였을 때
수강신청이라는 도메인을 분석하는 과정에서 생각해 볼 수 있는 핵심으로 꼽을 수 있는 것들은 아래와 같은 정보가 될 수 있을 것 같다.

- 강좌정보(필수이수 과목여부, 학점정보, 강의에서 배우게 될 내용, 현재까지 신청한 학생 수 등) 애그리것
- 신청과목(수강신청한 과목들) 애그리것

또한 덜 중요하다고 생각할 수 있는 것은 아래가 될 수 있을 것이다.

- 교수정보 (교수 이력 등) 애그리것
- 강의실정보 (위치, 좌석배치도 등) 애그리것
- 강좌평가정보

이와 같이 컨텍스트에 핵심이 될 수 있는 것부터 그 외의 것까지 범위를 넓혀가며 도메인을 탐색하는 것이 
바운디드 컨텍스트를 이용한 도메인 디자인이라 할 수 있을 것이며
도메인간의 경계를 지어주는 역할을 하는 것도 바로 바운디드 컨텍스트라고 할 수 있을 것이다.

### 바운디드 컨텍스트의 사용
마이크로서비스 를 만드는 경우 유용하게 사용할 수 있다.
작년까지만 해도 마이크로서비스 설계에 대한 아티클이나 서적들을 쉽게 만나볼 수 있었던 것 같으나
근래에 들어서는 점차 뜸해지고 있는 것 같다.

그 이유는 데이터베이스만 단순하게 분리시키고
∏각 데이터베이스와 연동되는 API 들을 각각 만들어 이들간에 데이터 처리를 한다고 할 경우
아래와 같은 예시를 들 수 있을 듯 하다.

A 라는 API 를 호출을 하고 해당 호출은 내부적으로 B 라는 API 를 호출하며
B API 에서는 C API 를 호출하고 마지막으로 C Api 는 A API 를 호출하여 응답결과가 오면
다음 작업을 진행하게 된다고 가정해보자.

결국 API 간에 의존도가 생기게 되며
API 호출간에 발생하는 네트워크 간격이 벌어지면 벌어질 수록 요청에 대한 응답은 점점 늦어지게 된다.
게다가 해당 요청 범위 내에 데이터를 수정하거나 삭제하기 위해 트랜잭션을 사용하게 된다면
네트워크 지연이 발생하게 되면 자연스럽게 서비스 장애로 확대가 되게 될 것 이다.

이때 바운디드 컨텍스트 개념을 도입을 한다고 해보자.
각 API들은 독립된 바운디드 컨텍스트로써 정의하고 이들은 해당 컨텍스트 안에서만 유효한
고유의 DTO 클래스를 통해서 해당 바운디드 컨텍스트에 속한 데이터베이스 계층과 통신을 하게 된다.

![boudned context api design]({{ "images/post/DomainDriven_API.png" | absolute_url }})

중요한 포인트는 서로 다른 의미를 가진 도메인들이 동일한 경계안에서 관계를 가지는 디자인을 하지 않도록 하는 것이다.
API 엔드포인트, DTO, 데이터베이스 모두가 이 기준에 포함이 되는 것이다.
어떠한 동작이 어플리케이션에서 이뤄졌을 때 이 동작이 진행이 되면서 여러 이벤트들을 만든다고 한다면
어떤 이벤트는 A 라는 컨텍스트 안에서 어떤 이벤트는 B 라는 컨텍스트 안에서 처리가 될 수 있는 것이다.

물론 여러 컨텍스트들에 한꺼번에 영향을 미치는 동작이 많고 자주 발생한다는 것은
디자인 측면에서 컨텍스트 재설계를 고려하는 것이 좋지 않을까 생각한다.
